%{
    #include "hw3-output.hpp"
    #include "sym_tables.hpp"
    #include "structs.hpp"

	using namespace output;

	extern int yylineno;
	int yyerror(const char * message);
    extern int yylex();


    SymbolTable symbolTable = SymbolTable();
    string curr_func_ret_type;
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL

%token TRUE
%token FALSE
%token RETURN
%token IF

%token WHILE
%token BREAK
%token CONTINUE
%token SWITCH
%token CASE
%token DEFAULT
%token COLON
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token ID
%token NUM
%token STRING

%right ASSIGN
%left OR
%left AND
%left RELOP_EQ
%nonassoc RELOP_REL
%left BINOP_ADD
%left BINOP_MUL
%right NOT
%nonassoc RPAREN
%nonassoc LPAREN
%nonassoc ELSE

%type<exp> Exp;
%type<exp> Type;
%type<exp> RetType;
%type<funcArgsList> FormalsList;
%type<funcArgsList> Formals;
%type<funcArg> FormalDecl;
%type<typeList> ExpList;
%type<exp> Call;
%type<id> ID;
%type<exp> NUM;
%type<exp> NUM_WITH_VAL;

%%

Program     :   M1 Funcs                                                    {close_global_scope();}

M1          :   /* epsilon */                                               {symbolTable.open_first_scope()}

Funcs       :   FuncDecl Funcs                                              {   /* open another scope for next func */   }
            |   /* epsilon */                                               {   /* get params for the func */   }

FuncDecl    :   RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE   {}

RetType     :   Type                                                        {}
            |   VOID                                                        {}

Formals     :   FormalsList                                                 {}
            |   /* epsilon */                                               {}

FormalsList     :   FormalDecl                                              {}
                |   FormalDecl COMMA FormalsList                            {}

FormalDecl      : Type ID                                                   {}

Statements      :   Statement                                               {}
                |   Statements Statement                                    {}

Statement       :   LBRACE Statements RBRACE                                {}
                |   Type ID SC                                              {}
                |   Type ID ASSIGN Exp SC                                   {}
                |   ID ASSIGN Exp SC                                        {}
                |   Call SC                                                 {}
                |   RETURN SC                                               {}
                |   RETURN Exp SC                                           {}
                |   IF LPAREN Exp RPAREN Statement                          {}
                |   IF LPAREN Exp RPAREN Statement ELSE Statement           {}
                |   WHILE LPAREN Exp RPAREN Statement                       {}
                |   BREAK SC                                                {}
                |   CONTINUE SC                                             {}
                |   SWITCH LPAREN Exp RPAREN LBRACE CaseList RBRACE         {}

Call        :   ID LPAREN ExpList RPAREN                                    {}
            |   ID LPAREN RPAREN                                            {}

ExpList     :   Exp                                                         {}
            |   Exp COMMA ExpList                                           {}

Type        :   INT                                                         {}
            |   BYTE                                                        {}
            |   BOOL                                                        {}

Exp         :   LPAREN Exp RPAREN                                           {}
            |   Exp BINOP_ADD Exp                                           {}
            |   Exp BINOP_MUL Exp                                           {}
            |   ID                                                          {}
            |   Call                                                        {}
            |   NUM                                                         {}
            |   NUM B                                                       {}
            |   STRING                                                      {}
            |   TRUE                                                        {}
            |   FALSE                                                       {}
            |   NOT Exp                                                     {}
            |   Exp AND Exp                                                 {}
            |   Exp OR Exp                                                  {}
            |   Exp RELOP_EQ Exp                                            {}
            |   Exp RELOP_REL Exp                                           {}

CaseList         :   CaseDecl CaseList                                      {}
                 |   CaseDecl                                               {}
                 |   DEFAULT COLON Statements                               {}

CaseDecl        :   CASE NUM COLON Statements                               {}

%%

int main() {
	return yyparse();
}

int yyerror(const char* message) {
	errorSyn(yylineno);
	exit(1);
}